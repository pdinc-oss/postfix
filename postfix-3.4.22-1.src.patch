diff -ur src/postfix-3.4.22.orig/auxiliary/qshape/qshape.pl src/postfix-3.4.22/auxiliary/qshape/qshape.pl
--- src/postfix-3.4.22.orig/auxiliary/qshape/qshape.pl	2011-03-23 14:00:45.000000000 -0400
+++ src/postfix-3.4.22/auxiliary/qshape/qshape.pl	2021-09-22 23:38:59.352983300 -0400
@@ -186,7 +186,7 @@
 if ( -t STDOUT ) {
     $batch_msg_count = 1000 unless defined($batch_msg_count = $opts{"N"});
     $batch_top_domains = 20 unless defined ($batch_top_domains = $opts{"n"});
-    $cls = `clear`;
+    $cls = `clear 2>/dev/null`;
 } else {
     $batch_msg_count = 0;
     $batch_top_domains = 0;
diff -ur src/postfix-3.4.22.orig/makedefs src/postfix-3.4.22/makedefs
--- src/postfix-3.4.22.orig/makedefs	2021-01-16 18:36:30.000000000 -0500
+++ src/postfix-3.4.22/makedefs	2021-09-22 23:38:59.358308900 -0400
@@ -718,6 +718,10 @@
 		SYSLIBS="-lresolv -lsocket -lnsl -lc -lrpcsvc -L/usr/ucblib -lucb"
 		;;
 
+    CYGWIN_NT-*.*.3.[0-9]*)	SYSTYPE=CYGWIN2x
+		SYSLIBS="$SYSLIBS -ldb"
+		;;
+
 	 ".")	if [ -d /NextApps ]; then
 		    SYSTYPE=`hostinfo | sed -n \
 			's/^.*NeXT Mach 3.*$/NEXTSTEP3/;/NEXTSTEP3/{p;q;}'`
diff -ur src/postfix-3.4.22.orig/src/global/mail_params.c src/postfix-3.4.22/src/global/mail_params.c
--- src/postfix-3.4.22.orig/src/global/mail_params.c	2021-06-12 11:04:20.000000000 -0400
+++ src/postfix-3.4.22/src/global/mail_params.c	2021-09-22 23:38:59.362902100 -0400
@@ -531,6 +531,7 @@
 		  VAR_DEFAULT_PRIVS, VAR_MAIL_OWNER,
 		  var_default_privs, var_mail_owner,
 		  (long) var_owner_uid);
+#ifndef NO_STRICT_GID_CHECKS
     if (var_default_gid == var_owner_gid)
 	msg_fatal("file %s/%s: parameters %s and %s: users %s and %s have the same group ID: %ld",
 		  var_config_dir, MAIN_CONF_FILE,
@@ -549,6 +550,7 @@
 		  VAR_MAIL_OWNER, VAR_SGID_GROUP,
 		  var_mail_owner, var_sgid_group,
 		  (long) var_sgid_gid);
+#endif
 }
 
 #ifdef MYORIGIN_FROM_FILE
diff -ur src/postfix-3.4.22.orig/src/master/master.c src/postfix-3.4.22/src/master/master.c
--- src/postfix-3.4.22.orig/src/master/master.c	2019-02-03 15:15:04.000000000 -0500
+++ src/postfix-3.4.22/src/master/master.c	2021-09-22 23:38:59.366209000 -0400
@@ -434,7 +434,12 @@
      * parent process. We're not supposed to blow away the parent.
      */
     if (init_mode == 0 && debug_me == 0 && master_detach != 0
-	&& setsid() == -1 && getsid(0) != getpid())
+	&& setsid() == -1 &&
+#ifndef NO_MASTER_SETSID_CHECK
+	getsid(0) != getpid())
+#else
+	getpgid(0) != getpid())
+#endif
 	msg_fatal("unable to set session and process group ID: %m");
 
     /*
diff -ur src/postfix-3.4.22.orig/src/pipe/pipe.c src/postfix-3.4.22/src/pipe/pipe.c
--- src/postfix-3.4.22.orig/src/pipe/pipe.c	2019-02-03 13:57:14.000000000 -0500
+++ src/postfix-3.4.22/src/pipe/pipe.c	2021-09-22 23:38:59.369515500 -0400
@@ -1010,12 +1010,14 @@
 		  var_mail_owner);
     if (attr->gid == 0)
 	msg_fatal("user= command-line attribute specifies privileged group id 0");
+#ifndef NO_STRICT_GID_CHECKS
     if (attr->gid == var_owner_gid)
 	msg_fatal("user= command-line attribute specifies mail system owner %s group id %ld",
 		  var_mail_owner, (long) attr->gid);
     if (attr->gid == var_sgid_gid)
 	msg_fatal("user= command-line attribute specifies mail system %s group id %ld",
 		  var_sgid_group, (long) attr->gid);
+#endif
 
     /*
      * Give the poor tester a clue of what is going on.
diff -ur src/postfix-3.4.22.orig/src/postqueue/postqueue.c src/postfix-3.4.22/src/postqueue/postqueue.c
--- src/postfix-3.4.22.orig/src/postqueue/postqueue.c	2019-02-03 14:00:56.000000000 -0500
+++ src/postfix-3.4.22/src/postqueue/postqueue.c	2021-09-22 23:38:59.373484500 -0400
@@ -388,7 +388,11 @@
 	showq_path = concatenate(var_daemon_dir, "/", var_showq_service,
 				 (char *) 0);
 	argv = argv_alloc(6);
+#ifndef ALLOW_POSTQUEUE_RUN_SHOWQ_AS_ROOT
 	argv_add(argv, showq_path, "-u", "-S", (char *) 0);
+#else
+	argv_add(argv, showq_path,       "-S", (char *) 0);
+#endif
 	for (n = 0; n < msg_verbose; n++)
 	    argv_add(argv, "-v", (char *) 0);
 	argv_terminate(argv);
diff -ur src/postfix-3.4.22.orig/src/postsuper/postsuper.c src/postfix-3.4.22/src/postsuper/postsuper.c
--- src/postfix-3.4.22.orig/src/postsuper/postsuper.c	2019-02-03 15:12:00.000000000 -0500
+++ src/postfix-3.4.22/src/postsuper/postsuper.c	2021-09-22 23:38:59.377450900 -0400
@@ -445,6 +445,9 @@
 
     if ((ret = sane_rename(old, new)) < 0) {
 	if (errno != ENOENT
+#ifdef ALLOW_POSTSUPER_RUN_AS_ROOT /* Don't mkdir if run as root */
+	    || (geteuid() != var_owner_uid ? (errno = EPERM) : 0)
+#endif
 	    || mail_queue_mkdirs(new) < 0
 	    || (ret = sane_rename(old, new)) < 0)
 	    if (errno != ENOENT)
@@ -1262,7 +1265,11 @@
      * a non-root user limits the damage to the already compromised mail
      * owner.
      */
+#ifndef ALLOW_POSTSUPER_RUN_AS_ROOT
     set_ugid(var_owner_uid, var_owner_gid);
+#else
+    try_set_ugid(var_owner_uid, var_owner_gid);
+#endif
 
     /*
      * Be sure to log a warning if we do not finish structural repair. Maybe
diff -ur src/postfix-3.4.22.orig/src/spawn/spawn.c src/postfix-3.4.22/src/spawn/spawn.c
--- src/postfix-3.4.22.orig/src/spawn/spawn.c	2019-02-03 14:15:32.000000000 -0500
+++ src/postfix-3.4.22/src/spawn/spawn.c	2021-09-22 23:38:59.380757600 -0400
@@ -262,8 +262,10 @@
 	msg_fatal("request to deliver as mail system owner");
     if (attr->gid == 0)
 	msg_fatal("request to use privileged group id %ld", (long) attr->gid);
+#ifndef NO_STRICT_GID_CHECKS
     if (attr->gid == var_owner_gid)
 	msg_fatal("request to use mail system owner group id %ld", (long) attr->gid);
+#endif
     if (attr->uid == (uid_t) (-1))
 	msg_fatal("user must not have user ID -1");
     if (attr->gid == (gid_t) (-1))
diff -ur src/postfix-3.4.22.orig/src/util/edit_file.c src/postfix-3.4.22/src/util/edit_file.c
--- src/postfix-3.4.22.orig/src/util/edit_file.c	2017-02-18 20:58:21.000000000 -0500
+++ src/postfix-3.4.22/src/util/edit_file.c	2021-09-22 23:38:59.384066900 -0400
@@ -284,7 +284,10 @@
 	    || after_lock.st_size > 0
 #endif
 	    || after_lock.st_nlink > 1
-	    || (after_lock.st_mode & FILE_PERM_MASK) != EDIT_FILE_MODE) {
+#ifndef NO_STRICT_FMODE_CHECKS
+	    || (after_lock.st_mode & FILE_PERM_MASK) != EDIT_FILE_MODE
+#endif
+	) {
 	    if (unlink(ep->tmp_path) < 0 && errno != ENOENT)
 		msg_fatal("unlink %s: %m", ep->tmp_path);
 	    continue;
diff -ur src/postfix-3.4.22.orig/src/util/file_limit.c src/postfix-3.4.22/src/util/file_limit.c
--- src/postfix-3.4.22.orig/src/util/file_limit.c	2003-10-22 14:48:36.000000000 -0400
+++ src/postfix-3.4.22/src/util/file_limit.c	2021-09-22 23:38:59.388033700 -0400
@@ -83,11 +83,17 @@
     if (ulimit(UL_SETFSIZE, limit / ULIMIT_BLOCK_SIZE) < 0)
 	msg_fatal("ulimit: %m");
 #else
+#ifndef NO_SETRLIMIT_FSIZE
     struct rlimit rlim;
 
     rlim.rlim_cur = rlim.rlim_max = limit;
     if (setrlimit(RLIMIT_FSIZE, &rlim) < 0)
 	msg_fatal("setrlimit: %m");
+#else
+    if (msg_verbose)
+      msg_info("setting max file size (%ld KiB) is not supported on this platform",
+	       (long)(limit / 1024));
+#endif
 #ifdef SIGXFSZ
     if (signal(SIGXFSZ, SIG_IGN) == SIG_ERR)
 	msg_fatal("signal(SIGXFSZ,SIG_IGN): %m");
diff -ur src/postfix-3.4.22.orig/src/util/sys_compat.c src/postfix-3.4.22/src/util/sys_compat.c
--- src/postfix-3.4.22.orig/src/util/sys_compat.c	2017-12-27 17:29:45.000000000 -0500
+++ src/postfix-3.4.22/src/util/sys_compat.c	2021-09-22 23:38:59.394645400 -0400
@@ -70,6 +70,7 @@
 
 /* System library. */
 
+#define SYS_COMPAT_INTERNAL
 #include "sys_defs.h"
 
  /*
@@ -387,3 +388,438 @@
 }
 
 #endif
+
+#ifdef CYGWIN2x
+#include <errno.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include "msg.h"
+
+/*
+ * Provide hostname as FQDN
+ */
+int cygwin_gethostname(char *name, size_t size)
+{
+    if (gethostname(name, size))
+	return -1;
+    if (strchr(name, '.'))
+	return 0;
+    size_t hlen = strlen(name);
+    if (hlen + 32 > size)
+	return 0;
+
+    if (getdomainname(name+hlen+1, size-hlen-1))
+	return 0;
+    if (!name[hlen+1])
+	return 0;
+    name[hlen] = '.';
+    return 0;
+}
+
+/*
+ * Disable SO_PEERCRED handshake in Cygwin AF_UNIX emulation
+ */
+int cygwin_socket(int domain, int type, int protocol)
+{
+    int sd = socket(domain, type, protocol);
+    if (sd != -1 && domain == AF_UNIX && type == SOCK_STREAM) {
+	if (setsockopt(sd, SOL_SOCKET, SO_PEERCRED, NULL, 0))
+	    sd = -1;
+    }
+    return sd;
+}
+
+/*
+ * Cygwin root uid/gid emulation
+ */
+
+static uid_t sw_root_uid = 18;
+static gid_t sw_root_gid = 544;
+static uid_t pw_root_uid = 18;
+static uid_t pw_root_gid = 544;
+static uid_t emul_ruid = 0, emul_euid = 0;
+static uid_t emul_rgid = 0, emul_egid = 0;
+static int emul_mode = 0;
+
+static int is_init = 0;
+static int cygwin_debug = 0;
+
+#define MSG_DEBUG(args...)	(cygwin_debug     || msg_verbose > 1 ? msg_info("CYGWIN: " args) : (void)0)
+#define MSG_DEBUGX(args...)	(cygwin_debug > 1 || msg_verbose > 1 ? msg_info("CYGWIN: " args) : (void)0)
+
+#define CYGWIN_POSTFIX_DEBUG_ENV "CYGWIN_POSTFIX_DEBUG"
+#define CYGWIN_POSTFIX_UGID_ENV  "CYGWIN_POSTFIX_UGID"
+
+static void get_debug_env()
+{
+    const char *env = getenv(CYGWIN_POSTFIX_DEBUG_ENV);
+    if (!env)
+	return;
+    cygwin_debug = atoi(env);
+    if (cygwin_debug < 0)
+	cygwin_debug = 0;
+}
+
+static int get_ugid_env(const char *path)
+{
+    const char *env = getenv(CYGWIN_POSTFIX_UGID_ENV);
+    if (!env)
+	return 0;
+
+    MSG_DEBUGX("%s: " CYGWIN_POSTFIX_UGID_ENV "='%s'", path, env);
+
+    unsigned uid, gid, uid_mode, gid_mode;
+    int nc = -1;
+    sscanf(env, "%u,%u,%u,%u%n", &uid, &gid, &uid_mode, &gid_mode, &nc);
+
+    if (!(nc == (int)strlen(env) && uid && gid && uid_mode <= 2 && gid_mode <= 2))
+	msg_fatal("Syntax error in environment variable CYGWIN_POSTFIX_UGID='%s'", env);
+
+    sw_root_uid = uid;
+    sw_root_gid = gid;
+    emul_ruid = (uid_mode <= 1 ? 0 : uid);
+    emul_euid = (uid_mode == 0 ? 0 : uid);
+    emul_rgid = (gid_mode <= 1 ? 0 : gid);
+    emul_egid = (gid_mode == 0 ? 0 : gid);
+    return 1;
+}
+
+static void set_ugid_env()
+{
+    int saved_errno = errno;
+    /*
+     * Use static buffer with putenv() to avoid memory leak from setenv().
+     * Call putenv() each time because 'import_environment' filter may
+     * remove the entry between calls.
+     * Adding the variable to 'import_environment' is not needed then.
+     * Filter 'export_environment' is only used for external commands.
+     */
+    static char env[100] = CYGWIN_POSTFIX_UGID_ENV "=";
+    unsigned offs = sizeof(CYGWIN_POSTFIX_UGID_ENV);
+
+    snprintf(env+offs, sizeof(env), "%u,%u,%u,%u", sw_root_uid, sw_root_gid,
+	    (!emul_ruid ? (!emul_euid ? 0 : 1) : 2),
+	    (!emul_rgid ? (!emul_egid ? 0 : 1) : 2) );
+    putenv(env);
+    errno = saved_errno;
+}
+
+static int find_admin_gid()
+{
+    int size = getgroups(0, NULL);
+    if (size <= 0)
+	return -1;
+    gid_t groups[size];
+    getgroups(size, groups);
+    int i;
+    for (i = 0; i < size; i++) {
+	if (!groups[i] || groups[i] == 544)
+	    return groups[i];
+    }
+    return -1;
+}
+
+static int is_postfix_master(const char *path)
+{
+    const char suffix[] = "/master";
+    unsigned suflen = sizeof(suffix)-1;
+    unsigned len = strlen(path);
+    if (len <= suflen)
+	return 0;
+    if (strcmp(path + len - suflen, suffix))
+	return 0;
+    return 1;
+}
+
+static void do_init()
+{
+    int saved_errno = errno;
+    is_init = 1;
+    get_debug_env();
+
+    char path[256] = "";
+    if (readlink("/proc/self/exe", path, sizeof(path)) < 0)
+	msg_fatal("/proc/self/exe: readlink() failed: %s", strerror(errno));
+
+    int admin_gid;
+    if (get_ugid_env(path)) {
+	// Inherited root <> mail_owner switch emulation state from parent
+	emul_mode = 2;
+    }
+    else if ((admin_gid = find_admin_gid()) >= 0) {
+	// Do actual root <> user switch
+	sw_root_uid = pw_root_uid = getuid();
+	if (setgid(admin_gid))
+	    msg_fatal("setgid(%d) failed: %m", admin_gid);
+	sw_root_gid = pw_root_gid = getgid();
+    }
+    else if (is_postfix_master(path)) {
+	// Master without admin rights, emulate root <> mail_owner switch
+	sw_root_uid = getuid();
+	sw_root_gid = getgid();
+	// Inherit to child processes via environment
+	emul_mode = 1;
+	set_ugid_env();
+    }
+
+    MSG_DEBUGX("%s: sw/pw_root_uid=%d/%d, sw/pw_root_gid=%d/%d",
+	    path, sw_root_uid, pw_root_uid, sw_root_gid, pw_root_gid);
+    MSG_DEBUGX("%s: emul_r/euid=%d/%d, emul_r/egid=%d/%d",
+	    path, emul_ruid, emul_euid, emul_rgid, emul_egid);
+    MSG_DEBUGX("%s: emul_mode=%d, r/euid=%d/%d, r/egid=%d/%d", path, emul_mode,
+	    cygwin_getuid(), cygwin_geteuid(), cygwin_getgid(), cygwin_getegid());
+    errno = saved_errno;
+}
+
+static inline void init()
+{
+    if (!is_init)
+	do_init();
+}
+
+static inline void update_ugid_env()
+{
+    if (emul_mode)
+	set_ugid_env();
+}
+
+uid_t cygwin_getuid(void)
+{
+    init();
+    int uid = getuid();
+    if (uid == sw_root_uid)
+	return emul_ruid;
+    return uid;
+}
+
+uid_t cygwin_geteuid(void)
+{
+    init();
+    int uid = geteuid();
+    if (uid == sw_root_uid)
+	return emul_euid;
+    return uid;
+}
+
+gid_t cygwin_getgid(void)
+{
+    init();
+    int gid = getgid();
+    if (gid == sw_root_gid)
+	return emul_rgid;
+    return gid;
+}
+
+gid_t cygwin_getegid(void)
+{
+    init();
+    int gid = getegid();
+    if (gid == sw_root_gid)
+	return emul_egid;
+    return gid;
+}
+
+int cygwin_setuid(uid_t uid)
+{
+    init();
+    if (!uid && emul_ruid) {
+	MSG_DEBUG("setuid(%u): EPERM", uid);
+	errno = EPERM;
+	return -1;
+    }
+    if (!uid || uid == sw_root_uid) {
+	MSG_DEBUG("setuid(%u=>%u)", uid, sw_root_uid);
+	if (setuid(sw_root_uid))
+	    return -1;
+	emul_ruid = emul_euid = uid;
+	update_ugid_env();
+	return 0;
+    }
+    MSG_DEBUG("setuid(%u)", uid);
+    return setuid(uid);
+}
+
+int cygwin_seteuid(uid_t uid)
+{
+    init();
+    if (!uid && emul_ruid) {
+	MSG_DEBUG("seteuid(%u): EPERM", uid);
+	errno = EPERM;
+	return -1;
+    }
+    if (!uid || uid == sw_root_uid) {
+	MSG_DEBUG("seteuid(%u=>%u)", uid, sw_root_uid);
+	if (seteuid(sw_root_uid))
+	    return -1;
+	emul_euid = uid;
+	update_ugid_env();
+	return 0;
+    }
+    MSG_DEBUG("seteuid(%u)", uid);
+    return seteuid(uid);
+}
+
+int cygwin_setgid(gid_t gid)
+{
+    init();
+    if (!gid && emul_rgid) {
+	MSG_DEBUG("setgid(%u): EPERM", gid);
+	errno = EPERM;
+	return -1;
+    }
+    if (!gid || gid == sw_root_gid) {
+	MSG_DEBUG("setgid(%u=>%u)", gid, sw_root_gid);
+	if (setgid(sw_root_gid))
+	    return -1;
+	emul_rgid = emul_egid = gid;
+	update_ugid_env();
+	return 0;
+    }
+    MSG_DEBUG("setgid(%u)", gid);
+    return setgid(gid);
+}
+
+int cygwin_setegid(gid_t gid)
+{
+    init();
+    if (!gid && emul_rgid) {
+	MSG_DEBUG("setegid(%u) EPERM", gid);
+	errno = EPERM;
+	return -1;
+    }
+    if (!gid || gid == sw_root_gid) {
+	MSG_DEBUG("setegid(%u=>%u)", gid, sw_root_gid);
+	if (setegid(sw_root_gid))
+	    return -1;
+	emul_egid = gid;
+	update_ugid_env();
+	return 0;
+    }
+    MSG_DEBUG("setegid(%u)", gid);
+    return setegid(gid);
+}
+
+int cygwin_setgroups(int size, const gid_t *groups)
+{
+    init();
+    if (size != 1 || *groups != cygwin_getegid()) {
+	MSG_DEBUG("setgroups(%d, {%u, ...}): EPERM", size, *groups);
+	errno = EPERM;
+	return -1;
+    }
+    if (!*groups || *groups == sw_root_gid) {
+	MSG_DEBUG("setgroups(1, {%u=>%u})", *groups, sw_root_gid);
+	return setgroups(1, &sw_root_gid);
+    }
+    MSG_DEBUG("setgroups(1, {%u})", *groups);
+    return setgroups(1, groups);
+}
+
+static inline void map_root_uid(uid_t *uid)
+{
+    if (*uid == 18 || *uid == 544 || *uid == pw_root_uid)
+	*uid = 0;
+}
+
+static inline void map_root_gid(gid_t *gid)
+{
+    if (*gid == 18 || *gid == 544 || *gid == pw_root_gid)
+	*gid = 0;
+}
+
+struct passwd *cygwin_getpwnam(const char *name)
+{
+    init();
+    struct passwd *pwd = getpwnam(name);
+    if (!pwd)
+	return NULL;
+    map_root_uid(&pwd->pw_uid);
+    map_root_gid(&pwd->pw_gid);
+    return pwd;
+}
+
+struct passwd *cygwin_getpwuid(uid_t uid)
+{
+    init();
+    if (!uid)
+	uid = pw_root_uid;
+    struct passwd *pwd = getpwuid(uid);
+    if (!pwd)
+	return NULL;
+    map_root_uid(&pwd->pw_uid);
+    map_root_gid(&pwd->pw_gid);
+    return pwd;
+}
+
+struct group *cygwin_getgrnam(const char *name)
+{
+    init();
+    struct group *grp = getgrnam(name);
+    if (!grp)
+	return NULL;
+    map_root_gid(&grp->gr_gid);
+    return grp;
+}
+
+struct group *cygwin_getgrgid(gid_t gid)
+{
+    init();
+    if (!gid)
+	gid = pw_root_gid;
+    struct group *grp = getgrgid(gid);
+    if (!grp)
+	return NULL;
+    map_root_gid(&grp->gr_gid);
+    return grp;
+}
+
+int cygwin_stat(const char *path, struct stat *st)
+{
+    init();
+    if (stat(path, st))
+	return -1;
+    map_root_uid(&st->st_uid);
+    map_root_gid(&st->st_gid);
+    return 0;
+}
+
+int cygwin_lstat(const char *path, struct stat *st)
+{
+    init();
+    if (lstat(path, st))
+	return -1;
+    map_root_uid(&st->st_uid);
+    map_root_gid(&st->st_gid);
+    return 0;
+}
+
+int cygwin_fstat(int fd, struct stat *st)
+{
+    init();
+    if (fstat(fd, st))
+	return -1;
+    map_root_uid(&st->st_uid);
+    map_root_gid(&st->st_gid);
+    return 0;
+}
+
+#ifdef ALLOW_POSTSUPER_RUN_AS_ROOT
+
+void try_set_ugid(uid_t uid, gid_t gid)
+{
+    if (cygwin_geteuid() != 0)
+	msg_fatal("try_set_ugid(): euid = %u", cygwin_geteuid());
+    if (cygwin_setgid(gid) || cygwin_setuid(uid)) {
+	MSG_DEBUG("try_set_ugid(%u, %u) failed, continue with euid=%u, egid=%u", uid, gid,
+		  cygwin_geteuid(), cygwin_getegid());
+	return;
+    }
+    cygwin_setgroups(1, &gid);
+    MSG_DEBUG("try_set_ugid(%u, %u)", uid, gid);
+}
+
+#endif /* ALLOW_POSTSUPER_RUN_AS_ROOT */
+
+#endif /* CYGWIN2x */
diff -ur src/postfix-3.4.22.orig/src/util/sys_defs.h src/postfix-3.4.22/src/util/sys_defs.h
--- src/postfix-3.4.22.orig/src/util/sys_defs.h	2019-03-10 12:58:04.000000000 -0400
+++ src/postfix-3.4.22/src/util/sys_defs.h	2021-09-22 23:38:59.400597600 -0400
@@ -1253,6 +1253,121 @@
 #endif
 
  /*
+  * Cygwin.
+  */
+#ifdef CYGWIN2x
+#define SUPPORTED
+#ifndef FD_SETSIZE /* default is 64 */
+#define FD_SETSIZE	128
+#endif
+#include <sys/types.h>
+#include <sys/socket.h>
+#define UINT32_TYPE	unsigned int
+#define UINT16_TYPE	unsigned short
+#define USE_PATHS_H
+#define HAS_FLOCK_LOCK
+#define HAS_FCNTL_LOCK
+#define INTERNAL_LOCK	MYFLOCK_STYLE_FLOCK
+#define DEF_MAILBOX_LOCK "fcntl, dotlock"
+#define HAS_FSYNC
+#define HAS_DB
+#define NATIVE_DB_TYPE	"hash"
+#define ALIAS_DB_MAP	DEF_DB_TYPE ":/etc/aliases"
+#define GETTIMEOFDAY(t)	gettimeofday(t, (struct timezone *) 0)
+#define ROOT_PATH	"/usr/bin:/usr/sbin"
+#define USE_STATVFS
+#define STATVFS_IN_SYS_STATVFS_H
+#define PREPEND_PLUS_TO_OPTSTRING
+#define HAS_POSIX_REGEXP
+#define NATIVE_SENDMAIL_PATH	"/usr/sbin/sendmail"
+#define NATIVE_MAILQ_PATH	"/usr/bin/mailq"
+#define NATIVE_NEWALIAS_PATH	"/usr/bin/newaliases"
+#define NATIVE_COMMAND_DIR	"/usr/sbin"
+#define NATIVE_DAEMON_DIR	"/usr/libexec/postfix"
+#define SOCKADDR_SIZE	socklen_t
+#define SOCKOPT_SIZE	socklen_t
+#define HAS_IPV6
+#define HAVE_GETIFADDRS
+#define PREFERRED_RAND_SOURCE	"dev:/dev/urandom"
+#define USE_SYSV_POLL
+
+/* setrlimit(RLIMIT_FSIZE, .) is not implemented */
+#define NO_SETRLIMIT_FSIZE
+/* Disable -rw------- mode checks to avoid hang on noacl mounts */
+#define NO_STRICT_FMODE_CHECKS
+/* Disable strict gid overlap checks to allow 'None' group */
+#define NO_STRICT_GID_CHECKS
+/* cygrunsrv calls setpgid() before exec of master */
+#define NO_MASTER_SETSID_CHECK
+/* Could move through directory tree without directory permissions */
+#define HAVE_BYPASS_TRAVERSE_CHECKING
+/* Allow postsuper to continue even if setuid($mail_owner) fails */
+#define ALLOW_POSTSUPER_RUN_AS_ROOT
+void try_set_ugid(uid_t uid, gid_t gid);
+/* Allow postqueue to run showq as root if master is down */
+#define ALLOW_POSTQUEUE_RUN_SHOWQ_AS_ROOT
+
+/* Postfix expects FQDN from gethostname() */
+int cygwin_gethostname(char *name, size_t size);
+/* Disable SO_PEERCRED handshake in Cygwin AF_UNIX emulation */
+int cygwin_socket(int domain, int type, int protocol);
+
+/* Emulate root uid/gid */
+#include <grp.h>
+#include <pwd.h>
+#include <unistd.h>
+#include <sys/stat.h>
+
+uid_t cygwin_getuid(void);
+uid_t cygwin_geteuid(void);
+gid_t cygwin_getgid(void);
+gid_t cygwin_getegid(void);
+int cygwin_setuid(uid_t uid);
+int cygwin_seteuid(uid_t euid);
+int cygwin_setgid(gid_t gid);
+int cygwin_setegid(gid_t egid);
+int cygwin_setgroups(int size, const gid_t *list);
+struct passwd *cygwin_getpwnam(const char *name);
+struct passwd *cygwin_getpwuid(uid_t uid);
+struct group *cygwin_getgrgid(gid_t gid);
+struct group *cygwin_getgrnam(const char *name);
+int cygwin_stat(const char *path, struct stat *buf);
+int cygwin_lstat(const char *path, struct stat *buf);
+int cygwin_fstat(int fd, struct stat *buf);
+
+#ifndef SYS_COMPAT_INTERNAL
+#define gethostname(n,s)	cygwin_gethostname(n,s)
+#define socket(d,t,p)	cygwin_socket(d,t,p)
+#define getuid()	cygwin_getuid()
+#define geteuid()	cygwin_geteuid()
+#define getgid()	cygwin_getgid()
+#define getegid()	cygwin_getegid()
+#define setuid(u)	cygwin_setuid(u)
+#define seteuid(u)	cygwin_seteuid(u)
+#define setgid(g)	cygwin_setgid(g)
+#define setegid(g)	cygwin_setegid(g)
+#define setreuid(u,e)	cygwin_setreuid_MISSING(u,e)
+#define setregid(g,e)	cygwin_setregid_MISSING(g,e)
+#define getgroups(s,g)	cygwin_getgroups_MISSING(s,g)
+#define setgroups(s,g)	cygwin_setgroups(s,g)
+#define getpwnam(n)	cygwin_getpwnam(n)
+#define getpwuid(u)	cygwin_getpwuid(u)
+#define getpwnam_r(n,p,b,s,r)	cygwin_getpwnam_r_MISSING(n,p,b,s,r)
+#define getpwuid_r(u,p,b,s,r)	cygwin_getpwuid_r_MISSING(u,p,b,s,r)
+#define getgrnam(n)	cygwin_getgrnam(n)
+#define getgrgid(g)	cygwin_getgrgid(g)
+#define getgrnam_r(n,p,b,s,r)	cygwin_getgrnam_r_MISSING(n,p,b,s,r)
+#define getgrgid_r(g,p,b,s,r)	cygwin_getgrgid_r_MISSING(g,p,b,s,r)
+#define stat(p,s)	cygwin_stat(p,s)
+#define lstat(p,s)	cygwin_lstat(p,s)
+#define fstat(f,s)	cygwin_fstat(f,s)
+/* Disable stat() macros from warn_stat.h */
+#define WARN_STAT_INTERNAL
+#endif /* SYS_COMPAT_INTERNAL */
+
+#endif /* CYGWIN2x */
+
+ /*
   * We're not going to try to guess like configure does.
   */
 #ifndef SUPPORTED
diff -ur src/postfix-3.4.22.orig/src/util/unix_listen.c src/postfix-3.4.22/src/util/unix_listen.c
--- src/postfix-3.4.22.orig/src/util/unix_listen.c	2014-12-11 14:41:50.000000000 -0500
+++ src/postfix-3.4.22/src/util/unix_listen.c	2021-09-22 23:38:59.404566200 -0400
@@ -61,6 +61,27 @@
 #include "listen.h"
 #include "sane_accept.h"
 
+#ifdef HAVE_BYPASS_TRAVERSE_CHECKING
+/* Set group to parent dir, return appropriate mode */
+static int inherit_parent_dir_perms(const char *path)
+{
+    char dir[strlen(path)+1];
+    const char * slash = strrchr(path, '/');
+    struct stat st;
+    if (!slash)
+	return 0600;
+    strcpy(dir, path);
+    dir[slash-path] = '\0';
+    if (stat(dir, &st))
+	return 0600;
+    if (!(st.st_mode & 0070))
+	return 0600;
+    if (chown(path, -1, st.st_gid))
+	return 0600;
+    return 0660;
+}
+#endif
+
 /* unix_listen - create UNIX-domain listener */
 
 int     unix_listen(const char *addr, int backlog, int block_mode)
@@ -69,6 +90,7 @@
     struct sockaddr_un sun;
     ssize_t len = strlen(addr);
     int     sock;
+    int     mode;
 
     /*
      * Translate address information to internal form.
@@ -92,11 +114,17 @@
 	msg_fatal("remove %s: %m", addr);
     if (bind(sock, (struct sockaddr *) &sun, sizeof(sun)) < 0)
 	msg_fatal("bind: %s: %m", addr);
+
+#ifdef HAVE_BYPASS_TRAVERSE_CHECKING
+    mode = inherit_parent_dir_perms(addr);
+#else
+    mode = 0666;
+#endif
 #ifdef FCHMOD_UNIX_SOCKETS
-    if (fchmod(sock, 0666) < 0)
+    if (fchmod(sock, mode) < 0)
 	msg_fatal("fchmod socket %s: %m", addr);
 #else
-    if (chmod(addr, 0666) < 0)
+    if (chmod(addr, mode) < 0)
 	msg_fatal("chmod socket %s: %m", addr);
 #endif
     non_blocking(sock, block_mode);
